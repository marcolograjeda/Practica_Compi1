package analizadores_datos;
import java_cup.runtime.*;
import graficadorbarras.*;
import clases.*;

parser code
{:
    ArchivoDatos datos = graficadorbarras.GraficadorBarras.datos;
    public String salida = "";
    /**
    * Metodo para error sintactico
    **/

    public void errorSemantico(String tipo){
        graficadorbarras.GraficadorBarras.erroresSemanticos.add("Error semantico en "+ tipo +" en el archivo de datos ");  
    }
    public void syntax_error(Symbol s){
        System.err.println("Error sintacto l√≠nea " + (s.left) +" columna "+s.right+ ". No se esperaba " +s.value+"."); 
            graficadorbarras.GraficadorBarras.erroresSintacticos.add(new Token(0,s.value.toString(), "Sintactico en archivo de datos", Integer.toString(s.left), Integer.toString(s.right)));
        }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //System.err.println("Error irrecuperable en la linea " + (s.left)+ " columna " +s.right+". Elemento " + s.value + " no reconocido.");
    }

:}

terminal String claves, registros, num, cadena, decimal;
terminal String llaveA, llaveC, corcheteA, corcheteC, igual, coma; 

non terminal String CDAT, CLA, REGIS, LISTAR, LISTACAD;
non terminal Dato DATOS;
non terminal Registro LISTAMIX;

precedence left coma;

start with CDAT; 
CDAT::= CLA
    ;

CLA::= claves igual corcheteA LISTACAD corcheteC REGIS{:System.out.println("Entre a claves"); :}
    ;

REGIS ::= registros igual corcheteA LISTAR corcheteC{::}
    ;

LISTAR::= LISTAR llaveA LISTAMIX:regis llaveC {:
            if(regis.datos.size() == datos.registros.get(0).datos.size()){
                boolean clavesIguales = true;
                int contador = 0;
                String datosIncorrectos = "";
                for(Dato x: regis.datos){
                    if(x.tipo == 2){
                        if(datos.registros.get(0).datos.get(contador).tipo != 2){
                            clavesIguales = false;
                            datosIncorrectos += x.cadena +" "+x.decimal+" "+ x.num +";" ;
                            break;
                        }
                    }else{
                        if(datos.registros.get(0).datos.get(contador).tipo == 2){
                            clavesIguales = false;
                            datosIncorrectos += x.cadena +" "+x.decimal+" "+ x.num +";" ;
                            break;
                        }
                    }
                    contador++;
                }
                if(clavesIguales){
                    datos.registros.add(regis);
                }else{
                    errorSemantico("tipo de dato incorrecto "); //preguntar para sacar la linea regisleft
                }
            }else{
                errorSemantico("diferente largo de registro "); 
            }:}
      |   llaveA LISTAMIX:regis llaveC {:datos.registros.add(regis);:}
    ;

LISTAMIX::= LISTAMIX:regis  coma DATOS:dat {:regis.datos.add(dat); RESULT = regis;:}
        |   DATOS:dat {:Registro nuevo = new Registro(); nuevo.datos.add(dat);
            RESULT = nuevo;:}
    ;

LISTACAD::= LISTACAD coma cadena:cad {:Clave nueva = new Clave(cad);
                          datos.claves.add(nueva);
                        :}
        |   cadena:cad {:Clave nueva = new Clave(cad);
                          datos.claves.add(nueva);
                        :}
        ;

DATOS::= num:num {:Dato dat = new Dato(0,"",Integer.parseInt(num),0); RESULT = dat;:}
        | decimal:dec {:Dato dat = new Dato(1,"",0,Double.parseDouble(dec)); RESULT = dat;:}
        | cadena:cad {:Dato dat = new Dato(2,cad,0,0); RESULT = dat;:}
        ;